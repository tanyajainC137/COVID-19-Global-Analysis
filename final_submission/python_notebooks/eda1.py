# -*- coding: utf-8 -*-
"""EDA1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1acjowne84bmwzm0jkecyS_Al-W_MW1Dt
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import date, datetime

# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv('https://raw.githubusercontent.com/imdevskp/covid_19_jhu_data_web_scrap_and_cleaning/master/covid_19_clean_complete.csv')
data.head()

#correcting error in data

#data['Deaths'][36458] = 5738 #and data[data['Date'] == '2020-06-09']
print('last updated: ' + str(max(data['Date'])))

data.shape

data.describe()

data.info()

data['Date'] = pd.to_datetime(data['Date'].astype(str), format = '%Y-%m-%d' )

data.dtypes

#assessing NaN values
data[data['Province/State'].isnull()]

#exploring china data
data[data['Country/Region'] == 'China']['Province/State'].value_counts()

china_data = data[data['Country/Region'] == 'China']
china_data = china_data[china_data['Date'] == max(data['Date'])].sort_values(['Confirmed'], ascending = False)
china_data = china_data.head(5)
plt.figure(figsize= (7,4))
plt.barh(china_data['Province/State'], width = china_data['Confirmed'], label = 'Confirmed')
plt.barh(china_data['Province/State'], width = china_data['Deaths'], label = 'Deaths', color = 'r')
plt.barh(china_data['Province/State'], width = china_data['Recovered'], label = 'Recovered', color = 'green')
plt.legend()
plt.title('Total Cases in China')
plt.show()

#exploring global daily trend
daywise = data.groupby(['Date'])['Confirmed', 'Deaths'].agg([sum])
daywise.reset_index(inplace = True)
daywise.tail()

plt.figure()
plt.figure(figsize=(8,8))
sns.lineplot(daywise['Date'], daywise['Confirmed']['sum']  , color ='b')
sns.lineplot(daywise['Date'], daywise['Deaths']['sum'], color = 'r')
plt.legend(['Confirmed','Deaths'])
plt.title('Global Cases and Deaths')
plt.show()

data.nunique()

#Identifying worst hit countries

countrywise = data.groupby(['Country/Region','Date'])['Confirmed', 'Deaths', 'Recovered'].agg(sum)
countrywise = countrywise.reset_index()
countrywise.head()

maxdate = max(data['Date'])

maxrows = countrywise[countrywise['Date'] == maxdate]
maxrows = maxrows.sort_values(['Confirmed'], ascending = False)
maxrows = maxrows.head(15)

plt.figure(figsize = (12,8))
plt.subplot(2,1,1)
plt.barh(maxrows['Country/Region'], width = maxrows['Confirmed'])
plt.legend(['Confirmed', 'Deaths'])
plt.title('Total Confirmed Cases in top 15 countries')
plt.show()

maxrowsd = countrywise[countrywise['Date'] == maxdate]
maxrowsd = maxrowsd.sort_values(['Deaths'], ascending = False)
maxrowsd = maxrowsd.head(15)

plt.figure(figsize = (12,8))
plt.subplot(2,1,2)
plt.barh(maxrowsd['Country/Region'], width = maxrowsd['Deaths'], color = 'pink')
plt.legend([ 'Deaths'])
plt.title('Total Death Cases in top 15 countries')
plt.show()

maxrowsf = maxrows['Country/Region']
maxrowsf = maxrowsf.append(maxrowsd['Country/Region'], ignore_index =True)
maxrowsf.drop_duplicates(inplace = True)
maxrowsf.reset_index(drop=True, inplace=True)
maxrowsf

# analysising each prominent country individually
def country_spread(data, country_name):
    country = data[data['Country/Region'] == country_name]
    c_growth = country.groupby(['Date'])['Confirmed', 'Deaths' , 'Recovered'].agg(sum)

    c_growth['new_conf'] = c_growth['Confirmed'].diff()
    c_growth['new_death'] = c_growth['Deaths'].diff()
    c_growth['new_recover'] = c_growth['Recovered'].diff()
    
    
    #filling first row data
    a = c_growth['Confirmed'].iloc[0]
    c_growth['new_conf'].iloc[0] = a
    b = c_growth['Deaths'].iloc[0]
    c_growth['new_death'].iloc[0]= b
    c = c_growth['Recovered'].iloc[0]
    c_growth['new_recover'].iloc[0] = c

    #cleaning irregular values
    c_growth = c_growth[c_growth['new_conf']>=0]
    c_growth = c_growth[c_growth['new_death']>=0]
    c_growth = c_growth[c_growth['new_recover']>=0]
  

    plt.figure(figsize = (7,4))
    plt.plot(c_growth['new_conf'], color ='b',label = 'New Cases')
    plt.plot(c_growth['new_death'], color = 'r', label = 'New Death')
    plt.plot(c_growth['new_recover'], color = 'g', label  = 'New recover')
    
    plt.title('New cases,  deaths and recovery in ' + country_name)
    plt.legend()
    plt.show()
    
    return c_growth

database = []
for country in maxrowsf:
  x = country_spread(data, country)
  database.append(x)

# plotting geographically across the world map
from sklearn.preprocessing import MinMaxScaler

map_data = data[data['Date'] == max(data.Date)]
map_data1 = map_data.groupby(['Country/Region'])['Confirmed', 'Deaths', 'Recovered'].agg(sum)
map_data1 = map_data1.reset_index()
map_data2 = map_data.groupby(['Country/Region'])['Lat', 'Long'].agg(np.mean)
map_data2 = map_data2.reset_index()
scaler = MinMaxScaler()
size_data = np.array(map_data1['Confirmed'])
size_data = size_data.reshape(-1,1)
size = scaler.fit_transform(size_data)

#BBox = (map_data2.Long.min(),   map_data2.Long.max(),  map_data2.Lat.min(),  map_data2.Lat.max())
#BBox = (map_data.Long.min(),   map_data.Long.max(),  map_data.Lat.min(),  map_data.Lat.max())

BBox = (-200, 170, -75, 100)

print(BBox)

mymap = plt.imread('/content/drive/My Drive/Global Analysis Covid 19/COVID-19 Project/Data/map (1).png',0)

fig, ax = plt.subplots(figsize = (12,7))
ax.scatter(map_data2.Long, map_data2.Lat, zorder=1, alpha= 0.2, c='b', s=10000*size)
ax.set_title('Plotting COVID 19')
ax.set_xlim(BBox[0],BBox[1])
ax.set_ylim(BBox[2],BBox[3])
ax.imshow(mymap, zorder=0, extent = BBox, aspect= 'auto')

#We can clearly see the devastating impact on the US and Europe